package org.baylist.tests.api;

import org.baylist.todoist.controller.TodoistController;
import org.baylist.todoist.dto.Project;
import org.baylist.todoist.dto.Task;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest
public class TodoistCloseReopenTests {
    @Autowired
    TodoistController todoistController;

    @Test
    public void closeAndReopenTask() {
        Project project = org.baylist.todoist.dto.Project.builder()
                .setName("Для Закрытия")
                .build();
        Project testProject = todoistController.createProject(project);
        long idTestProject = Long.parseLong(testProject.getId());

        Task newTask = Task.builder()
                .xyiContent("Открытая Таска")
                .xyiProjectId(String.valueOf(idTestProject))
                .build();
        Task createdTask = todoistController.createTask(newTask);

        List<Task> tasksBeforeClosing = todoistController.getTasksByProject(idTestProject);
        Optional<Task> taskInProjectBeforeClosing = tasksBeforeClosing.stream()
                .filter(t -> t.getId().equals(createdTask.getId()))
                .findAny();
        assertTrue(taskInProjectBeforeClosing.isPresent());

        todoistController.closeTask(Long.parseLong(createdTask.getId()));

        List<Task> tasksAfterClosing = todoistController.getTasksByProject(idTestProject);
        Optional<Task> taskInProjectAfterClosing = tasksAfterClosing.stream()
                .filter(t -> t.getId().equals(createdTask.getId()))
                .findAny();

        assertFalse(taskInProjectAfterClosing.isPresent());

        todoistController.reopenTask(Long.parseLong(createdTask.getId()));

        List<Task> tasksAfterReopening = todoistController.getTasksByProject(idTestProject);
        Optional<Task> taskInProjectAfterReopening = tasksAfterReopening.stream()
                .filter(t -> t.getId().equals(createdTask.getId()))
                .findAny();

        assertTrue(taskInProjectAfterReopening.isPresent());
    }
}

