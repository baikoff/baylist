package org.baylist.tests.api;

import org.baylist.controller.todoist.Todoist;
import org.baylist.dto.todoist.api.Task;
import org.baylist.tests.BaseTest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.awaitility.Awaitility.await;

public class TodoistCloseReopenTest extends BaseTest {

    @Autowired
    Todoist todoistController;

    @Test
    @Disabled("тест регулярно падает, надо бы починить")
    public void closeAndReopenTask() {
        String projectId = todoistController.getProjects().stream().filter(p -> p.getName().equals("buylist")).findFirst().orElseThrow().getId();

        Task newTask = Task.builder()
                .content("Открытая Таска")
                .projectId(projectId)
                .build();
        Task createdTask = todoistController.createTask(newTask);

        List<Task> tasksBeforeClosing = todoistController.getTasksByProject(Long.parseLong(projectId));
        Optional<Task> taskInProjectBeforeClosing = tasksBeforeClosing.stream()
                .filter(t -> t.getId().equals(createdTask.getId()))
                .findAny();
        assertThat(taskInProjectBeforeClosing).isPresent();

        todoistController.closeTask(Long.parseLong(createdTask.getId()));

        List<Task> tasksAfterClosing = todoistController.getTasksByProject(Long.parseLong(projectId));
        Optional<Task> taskInProjectAfterClosing = tasksAfterClosing.stream()
                .filter(t -> t.getId().equals(createdTask.getId()))
                .findAny();
        assertThat(taskInProjectAfterClosing).isNotPresent();

        todoistController.reopenTask(Long.parseLong(createdTask.getId()));

        List<Task> tasksAfterReopening = todoistController.getTasksByProject(Long.parseLong(projectId));
        Optional<Task> taskInProjectAfterReopening = tasksAfterReopening.stream()
                .filter(t -> t.getId().equals(createdTask.getId()))
                .findAny();
        await().until(taskInProjectAfterReopening::isPresent);
    }
}

